# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  tests:
    environment:
      POETRY_VIRTUALENVS_IN_PROJECT: true
      CC_TEST_REPORTER_ID: c9ec35db75642b31c9d4d818e9efae69202fc4f2a0c2bb35f56ebeef28c4031f

    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8-buster
        environment:
          # set an env token to where our circleci database is
          # by default the user is `postgres` and the db name is `circle_test`
          TEST_DATABASE_URL: postgresql://postgres:mecha@localhost/circle_test

      # Postgres container
      - image: circleci/postgres:11.6-alpine
        environment:
          #          DB_USER: mecha
          #          DB_DATABASE: mecha
          POSTGRES_PASSWORD: mecha

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: .
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "poetry.lock" }}


      # do caching magic
      - save_cache:
          paths:
            - ".venv"
          key: v5-dependencies-{{ checksum "poetry.lock" }}-{{ checksum "pyproject.toml"}}


      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            - DOCKERIZE_VERSION: v0.3.0

      # install psql tools
      - run:
          name: update apt tables
          command: sudo apt-get update
      - run:
          name: install psql client
          command: sudo apt-get install postgresql-client-11
      - run: whoami
      # wait for the database to spin up
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # setup the database
      - run:
          name: Setup postgres database
          command: |
            psql -d $TEST_DATABASE_URL -c "CREATE TABLE public.fact ( name character varying NOT NULL, lang character varying NOT NULL, message character varying NOT NULL, author character varying, CONSTRAINT fact_pkey PRIMARY KEY (name, lang));"
            psql -d $TEST_DATABASE_URL -c "INSERT INTO public.fact (name, lang, message, author) VALUES ('test', 'en', 'This is a test fact.', 'Shatt');"

      # run tests
      - run:
          name: run tests
          command: |
            poetry run pytest -m "unit or regressions" -v --cov --cov-report xml --junit-xml=test-reports/pytest.xml  --doctest-modules
            poetry run codecov -F unittest

      - store_artifacts:
          path: logs/unit_tests.log

      - store_artifacts:
          path: test-reports


      - store_test_results:
          path: test-reports

  integration_tests:
    environment:
      POETRY_VIRTUALENVS_IN_PROJECT: true

    docker:
      - image: circleci/python:3.8-buster
        environment:
          # set an env token to where our circleci database is
          # by default the user is `postgres` and the db name is `circle_test`
          TEST_DATABASE_URL: postgresql://postgres:mecha@localhost/circle_test

      # Postgres container
      - image: circleci/postgres:11.6-alpine
        environment:
          #          DB_USER: mecha
          #          DB_DATABASE: mecha
          POSTGRES_PASSWORD: mecha

      # Unreal container
      - image: theunkn0wn1/unrealircd:latest
        name: irc

      # Anope container
      - image: theunkn0wn1/anope_services:latest
        name: services

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: .
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "poetry.lock" }}-{{ checksum "pyproject.toml"}}


      # do caching magic
      - save_cache:
          paths:
            - ".venv"
          key: v5-dependencies-{{ checksum "poetry.lock" }}-{{ checksum "pyproject.toml"}}


      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            - DOCKERIZE_VERSION: v0.3.0

      # install psql tools
      - run:
          name: update apt tables
          command: sudo apt-get update
      - run:
          name: install psql client
          command: sudo apt-get install postgresql-client-11
      - run: whoami
      # wait for the database to spin up
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # setup the database
      - run:
          name: Setup postgres database
          command: |
            psql -d $TEST_DATABASE_URL -c "CREATE TABLE public.fact ( name character varying NOT NULL, lang character varying NOT NULL, message character varying NOT NULL, author character varying, CONSTRAINT fact_pkey PRIMARY KEY (name, lang));"
            psql -d $TEST_DATABASE_URL -c "INSERT INTO public.fact (name, lang, message, author) VALUES ('test', 'en', 'This is a test fact.', 'Shatt');"

      # Run full smoke test
      - run:
          name: smoke test
          command: |
            timeout 10 poetry run python -m src --config testing.toml || :
            grep -i "Connected to IRC" logs/unit_tests.log

  setup_workspace:
    environment:
      POETRY_VIRTUALENVS_IN_PROJECT: true

    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8-buster

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "poetry.lock" }}


      - run:
          name: install dependencies
          command: |
            pip install 'poetry~=1.0'
            poetry add pylint-exit>=1.1.0
            poetry install --no-root

      # give CircleCi access to cached venv
      - run:
          name: Fix permissions on venv
          command: sudo chown -R circleci:circleci ".venv"

      # do caching magic
      - save_cache:
          paths:
            - ".venv"
          key: v5-dependencies-{{ checksum "poetry.lock" }}-{{ checksum "pyproject.toml"}}
      # cache code and dependencies for later jobs
      - persist_to_workspace:
          root: .
          paths: .



  linting:
    environment:
      POETRY_VIRTUALENVS_IN_PROJECT: true

    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8-buster

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: .


      - run:
          name: Run pylint over project
          # run pylint, pass it through pylint-exit so Circle doesn't throw a fit
          command: poetry run pylint src || poetry run pylint-exit $?
      - run:
          name: run pycodestyle over project
          command: poetry run pycodestyle src

workflows:
  version: 2
  build_and_lint:
    jobs:
      - setup_workspace
      #       run tests first
      - linting:
          requires:
            - setup_workspace
      - tests:
          #          don't bother running tests if linting catches any errors
          requires:
            - setup_workspace
      - integration_tests:
          requires:
            - setup_workspace
            - linting
            - tests

notify:
  branches:
    - all
  webhooks:
    - url: https://announcer-dev.fuelrats.com/circle
