# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.1/language-python/ for more details
#
version: 2.1
executors:
  python_exec:
    docker:
      - image: circleci/python:3.7
    environment:
      # tell pipenv to put its venv in the project path, for the sake of workspace caching
      PIPENV_VENV_IN_PROJECT: true
      # set an env token to where our circleci database is
      # by default the user is `root` and the db name is `circle_test`
      TEST_DATABASE_URL: postgresql://root:mecha@localhost/circle_test

jobs:
  tests:
    executor: python_exec
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      # Postgres container
      - image: circleci/postgres:9.6.2-alpine
        environment:
          #          DB_USER: mecha
          #          DB_DATABASE: mecha
          POSTGRES_PASSWORD: mecha

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: .
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "Pipfile.lock" }}


      # do caching magic
      - save_cache:
          paths:
            - ".venv"
          key: v3-dependencies-{{ checksum "Pipfile.lock" }}


      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            - DOCKERIZE_VERSION: v0.3.0

      # install psql tools
      - run:
          name: update apt tables
          command: sudo apt-get update
      - run:
          name: install psql client
          command: sudo apt-get install postgresql-client-9.6
      - run: whoami
      # wait for the database to spin up
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # setup the database
      - run:
          name: Setup postgres database
          command: |
            psql -d $TEST_DATABASE_URL -c "CREATE TABLE public.fact ( name character varying NOT NULL, lang character varying NOT NULL, message character varying NOT NULL, author character varying, CONSTRAINT fact_pkey PRIMARY KEY (name, lang));"
            psql -d $TEST_DATABASE_URL -c "INSERT INTO public.fact (name, lang, message, author) VALUES ('test', 'en', 'This is a test fact.', 'Shatt');"

      # run tests
      - run:
          name: run tests
          command: |
            pipenv run pytest -v --cov --cov-report xml --junit-xml=test-reports/pytest.xml  --doctest-modules
            pipenv run codecov

      - store_artifacts:
          path: logs/unit_tests.log

      - store_artifacts:
          path: test-reports


      - store_test_results:
          path: test-reports
  setup_workspace:
    executor: python_exec
    working_directory: ~/repo
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "Pipfile.lock" }}

      - run:
          name: install pipenv
          command: pip install pipenv
      - run:
          name: install dependencies
          command: |
            pipenv install -d

      # give CircleCi access to cached venv
      - run:
          name: Fix permissions on venv
          command: sudo chown -R circleci:circleci ".venv"

      # do caching magic
      - save_cache:
          paths:
            - ".venv"
          key: v3-dependencies-{{ checksum "Pipfile.lock" }}
      # cache code and dependencies for later jobs
      - persist_to_workspace:
          root: .
          paths: .



  linting:
    executor: python_exec

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: .

      - run:
          name: retrieve pylint-exit
          command: curl -o pylint-exit https://raw.githubusercontent.com/theunkn0wn1/pylint-exit/master/pylint_exit.py
      - run:
          name: retrieve pylint-exit's dependency
          command: pipenv run pip install bitarray
      - run:
          name: Run pylint over project
          # run pylint, pass it through pylint-exit so Circle doesn't throw a fit
          command: pipenv run pylint src || pipenv run python pylint-exit $?
      - run:
          name: run pycodestyle over project
          command: pipenv run pycodestyle src

workflows:
  version: 2
  build_and_lint:
    jobs:
      - setup_workspace
      #       run tests first
      - linting:
          requires:
            - setup_workspace
      - tests:
          #          don't bother running tests if linting catches any errors
          requires:
            - setup_workspace

notify:
  branches:
    - all
  webhooks:
    - url: http://orthanc.localecho.net/cgi-bin/webhook.py
